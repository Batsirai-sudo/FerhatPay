
// const post = async (url, data, method = 'POST', token) => {
//   return new Promise((resolve, reject) => {
//     const {baseURL, isWC} = generalUrl(url);
//     const contentType = includes(url, 'media')
//       ? 'multipart/form-data'
//       : 'application/json';
//     fetch(baseURL, {
//       method: method,
//       headers: {
//         Accept: 'application/json',
//         Authorization: !isWC && token ? `Bearer ${token}` : null,
//         'Content-Type': contentType,
//       },
//       body: data,
//     })
//       .then((res) => res.json())
//       .then((dataApi) => {
//         if (dataApi.code) {
//           reject(new Error(dataApi.message));
//         } else {
//           resolve(dataApi);
//         }
//       })
//       .catch((error) => {
//         console.error(error);
//         reject(error);
//       });
//   });
// };


	//  resolve(response);
	// const contentType = 'application/json';

	// fetch(baseURL, {
	//   ...options,
	//   method: 'GET',
	//   headers: {
	//     Accept: 'application/json',
	//     'Content-Type': contentType,
	//     Authorization: !isWC && token ? `Bearer ${token}` : null,
	//   },
	// })
	// .then((res) => res.json())
	// .then((data) => {
	//   if (data.code) {
	//     reject(new Error(data.message));
	//   } else {
	//     resolve(data);
	//   }
	// })
	// .catch((error) => {
	//   console.log(error);
	//   reject(error);
	// });
	// });

    
	//  resolve(response);
	// const contentType = 'application/json';
	// fetch(baseURL, {
	//   ...options,
	//   method: 'GET',
	//   headers: {
	//     Accept: 'application/json',
	//     'Content-Type': contentType,
	//     Authorization: !isWC && token ? `Bearer ${token}` : null,
	//   },
	// })
	// .then((res) => res.json())
	// .then((data) => {
	//   if (data.code) {
	//     reject(new Error(data.message));
	//   } else {
	//     resolve(data);
	//   }
	// })
	// .catch((error) => {
	//   console.log(error);
	//   reject(error);
	// });
	// });

    	// const isQuery = ['?'].indexOf('?') >= 0;
	// const signQuery = isQuery ? '&' : '?';

